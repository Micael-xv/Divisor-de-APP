#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <string.h>
//#ifdef_WIN32
//#endif // _WIN32

//criacao das funcao
void menu(char *arg);
void junta(char *nome);
void divide(long int tam_partes, int partes, char *arg);
int operacao(char *op);
int main(int argc, char **argv)
{
    //#ifdef _WIN32
        setlocale(LC_ALL, "Portuguese");
    //#endif
    if(argc<3)
    {
        menu(argv[0]);
        return(0);
    }
    FILE *fp;
    long int tam, tam_partes;
    int partes, op;

    if((op = operacao(argv[1])) == 3)
    {
        printf("Operacao nao reconhecida.\n\n\n");
        menu(argv[0]);
        return(0);
    }

    if((op = operacao(argv[1])) == 1 && argc < 4)
    {
        printf("Faltam argumentos necessarios para esta operacao\n\n\n");
        menu(argv[0]);
        return(0);
    }

    if(op==1)
    {
        fp = fopen(argv[2], "rb");
        if(!fp)
        {
            printf("Nao foi possivel abrir este arquivo\n");
            return(0);
        }
        fseek(fp, 0, SEEK_END);
        tam - ftell(fp);
        rewind(fp);
        fclose(fp);

        printf("Tamanho em bytes do arquivo: %ld\n", tam);
        partes = atoi(argv[3]);
        tam_partes = tam/partes;
        printf("Tamanho medio de cada parte: %ld\n", tam_partes);

        divide(tam_partes, partes, argv[2]);
    }

    if(op==2)
    {
        junta(argv[2]);
        printf("Operacao finalizada.\n");
    }
}
void junta(char *nome)
{
    char nomeoriginal[254], nomepartes[254];
    int i=0;
    unsigned int ch;
    FILE *orig, *fp;

    if(strlen(nome)<254)
    {
        snprintf(nomeoriginal, strlen(nome) -3, "%s", nome);
    }
    else
    {
        printf("Nome do arquivo maior que a variavel pode suportar\n");
        exit(1);
    }
    orig = fopen(nomeoriginal, "wb");
    while (1)
    {
        snprintf(nomepartes, 253, "%s.%03d", nomeoriginal, i);
        fp = fopen(nomepartes, "rb");
        if(!fp)
        {
            break;
        }
        do
        {
            ch = fgetc(fp);
            if(ch!=EOF)
                fputc(ch, orig);
        }while (ch!=EOF);
        {
            fclose(fp);
            i++;
        }
        fclose(orig);
        fclose(fp);
    }
}

void divide(long int tam_partes, int partes, char *arg)
{
    int i;
    long int lido = 0;
    unsigned int ch;
    char nome[100];
    FILE *result, *fp;

    fp = fopen(arg, "rb");
    if(!fp)
    {
        printf("Nao foi possivel abrir este arquivo.\n");
        exit(0);
    }

    for(i=0; i<partes; i++)
    {
        snprintf(nome, 99, "%s.%03d", arg, i);
        result = fopen(nome, "wb");
        if(!result)
        {
            printf("Nao foi possivel abrir o arquivo %s\n",nome);
            fclose(fp);
            exit(1);
        }
        do
        {
            ch = fgetc(fp);
            if (ch!=EOF)
                fputc(ch, result);
            lido++;
            if (lido==tam_partes && i< partes-1)
            {
                lido=0;
                break;
            }
            
        } while (ch!=EOF);
        fclose(result);
    }
    fclose(fp);
}

int operacao(char *op)
{
    if(!strcmp(op, "%d"))
        return(1);
    else if (!strcmp(op, "j"))
        return(2);
    else return(3);
    
}
void menu(char *arg)
{
    printf("Uso: %s operacao arquivo <partes/>\n\n", arg);
    printf("Operacao: d - dividir; j - juntar\n");
    printf("Arquivo: nome do arquivo para dividir ou o nome do arquico \".000\" para juntar\n");
    printf("Partes: este e apenas para operacao de dividir. coloque em quantas partes deseja dividir\n");
    printf("Exemplo: %s d teste.avi 5\n", arg);
    printf("O comando acima dividira o arquivo 'teste.avi' em 5 pedacos\n");
    printf("Exemplo: %s j teste.avi.000\n", arg);
    printf("O comando acima juntara os arquivos que compoem o arquivo \"teste.avi\" \n");
}
